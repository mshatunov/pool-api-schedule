buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:4.1.0'
    }
}
plugins {
    id 'net.ltgt.apt' version '0.19'
}

apply plugin: 'java'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.bmuschko.docker-spring-boot-application'

group = 'com.mshatunov.pool.api'
version = '0.0.2'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    gradlePluginPortal()
}

ext {
    springCloudVersion = 'Greenwich.RELEASE'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.cloud:spring-cloud-starter-openfeign')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')

    runtime('org.springframework.boot:spring-boot-devtools')

    compileOnly 'org.mapstruct:mapstruct-jdk8:1.2.0.Final'
    compileOnly 'org.projectlombok:lombok:1.16.20'

    annotationProcessor('org.mapstruct:mapstruct-processor:1.2.0.Final')
    annotationProcessor('org.projectlombok:lombok:1.16.20')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile 'org.junit.jupiter:junit-jupiter-engine'
    testCompile 'org.codehaus.groovy:groovy-all:2.5.4'
    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.1.1'
}

docker {
    registryCredentials {
        username = project.hasProperty('dockerUser') ? dockerUser : System.getenv('dockerUser')
        password = project.hasProperty('dockerPassword') ? dockerPassword : System.getenv('dockerPassword')
    }

    springBootApplication {
        baseImage = 'frolvlad/alpine-oraclejdk8:slim'
        tag = "mshatunov/${rootProject.name}:${version}"
    }
}

wrapper {
    gradleVersion = '5.0'
}